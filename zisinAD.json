{
  "log": {
    "disabled": false,
    "level": "info",
    "timestamp": true
  },
  "experimental": {
  },
  "dns": {
    "servers": [
      {
        "tag": "google",
        "address": "tls://dns.google",
        "detour": "Proxy"
      },
      {
        "tag": "fallback",
        "address": "8.8.8.8",
        "address_resolver": "google",
        "detour": "Proxy"
      },
      {
        "tag": "local-dns",
        "address": "223.5.5.5",
        "detour": "direct"
      },
      {
        "tag": "block-dns",
        "address": "rcode://success"
      }
    ],
    "rules": [
      {
        "outbound": "any",
        "server": "local-dns"
      },
      {
        "rule_set": [
          "Youtube0"
        ],
        "server": "fallback"
      },
      {
        "rule_set": [
          "Telegram1"
        ],
        "server": "fallback"
      },
      {
        "rule_set": [
          "Github0"
        ],
        "server": "fallback"
      },
      {
        "rule_set": [
          "Openai0"
        ],
        "server": "fallback"
      },
      {
        "rule_set": [
          "Netflix0"
        ],
        "server": "fallback"
      },
      {
        "rule_set": [
          "Google0"
        ],
        "server": "fallback"
      },
      {
        "rule_set": [
          "Direct1"
        ],
        "server": "local-dns"
      },
      {
        "query_type": [
          "A"
        ],
        "rewrite_ttl": 1,
        "server": "fallback"
      }
    ],
    "final": "local-dns",	
    "strategy": "ipv4_only"
  },
  "ntp": {
    "enabled": true,
    "server": "time.apple.com",
    "server_port": 123,
    "interval": "30m",
    "detour": "DIRECT"
  },  
  "inbounds": [
    {
      "type": "mixed",
      "tag": "mixed-in",
      "listen": "0.0.0.0",
      "listen_port": 8888,
      "sniff": true
    },
    {
      "type": "tun",
      "address": "172.19.0.1/30",
      "stack": "system",
      "sniff": true,
      "auto_route": true,
      "strict_route": true,
      "gso": false,
      "platform": {
        "http_proxy": {
          "enabled": true,
          "server": "127.0.0.1",
          "server_port": 8888
        }
      }
    }
  ],
  "route": {
    "rule_set": [
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "AntiAD",
        "url": "https://cdn.jsdelivr.net/gh/privacy-protection-tools/anti-ad.github.io@master/docs/anti-ad-sing-box.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Youtube0",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geosite/youtube.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Telegram0",
        "url": "https://cdn.jsdelivr.net/gh/CHIZI-0618/v2ray-rules-dat@raw/release/singbox_ip_rule_set/geoip-telegram.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Telegram1",
        "url": "https://cdn.jsdelivr.net/gh/CHIZI-0618/v2ray-rules-dat@raw/release/singbox_rule_set/geosite-telegram.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Github0",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geosite/github.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Openai0",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geosite/openai.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Netflix0",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geosite/netflix.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Netflix1",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo-lite/geoip/netflix.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Google0",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geosite/google.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Direct0",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geoip/cn.srs"
      },
      {
        "type": "remote",
        "format": "binary",
        "download_detour": "Proxy",
        "tag": "Direct1",
        "url": "https://cdn.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@raw/sing/geo/geosite/cn.srs"
      }
    ],
    "rules": [
      {
        "protocol": "dns",
        "outbound": "dns-out"
      },
      {
        "port": 53,
        "outbound": "dns-out"
      },
      {
        "type": "logical",
        "mode": "or",
        "rules": [
          {
            "port": 853
          },
          {
            "network": "udp",
            "port": 443
          },
          {
            "protocol": "stun"
          }
        ],
        "outbound": "block"
      },
      {
        "rule_set": [
          "AntiAD"
        ],
        "outbound": "block"
      },
      {
        "rule_set": [
          "Youtube0"
        ],
        "outbound": "Youtube"
      },
      {
        "rule_set": [
          "Telegram0",
          "Telegram1"
        ],
        "outbound": "Telegram"
      },
      {
        "rule_set": [
          "Github0"
        ],
        "outbound": "Github"
      },
      {
        "rule_set": [
          "Openai0"
        ],
        "outbound": "Openai"
      },
      {
        "rule_set": [
          "Netflix0",
          "Netflix1"
        ],
        "outbound": "Netflix"
      },
      {
        "rule_set": [
          "Google0"
        ],
        "outbound": "Google"
      },
      {
        "rule_set": [
          "Direct0",
          "Direct1"
        ],
        "outbound": "direct"
      },
      {
        "ip_is_private": true,
        "outbound": "direct"
      }
    ],
    "auto_detect_interface": true,
    "final": "Proxy"
  },
  "outbounds": [
    {
      "tag": "Proxy",
      "outbounds": [
        "jp1",
	    "direct",
        "us"
      ],
	  "default": "us",
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "tag": "Youtube",
      "outbounds": [
        "Proxy"
      ],
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "tag": "Telegram",
      "outbounds": [
        "Proxy"
      ],
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "tag": "Github",
      "outbounds": [
        "Proxy"
      ],
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "tag": "Openai",
      "outbounds": [
        "Proxy"
      ],
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "tag": "Netflix",
      "outbounds": [
        "Proxy"
      ],
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "tag": "Google",
      "outbounds": [
        "Proxy"
      ],
      "interrupt_exist_connections": true,
      "type": "selector"
    },
    {
      "type": "direct",
      "tag": "direct"
    },
    {
      "type": "dns",
      "tag": "dns-out"
    },
    {
      "type": "block",
      "tag": "block"
    },
    {
      "tag": "jp1",
      "server": "soft.speedtestwget.life",
      "server_port": 443,
      "type": "trojan",
      "password": "smxmm1314",
      "tls": {
        "enabled": true,
        "insecure": false,
        "server_name": "soft.speedtestwget.life"
      }
    },
    {
      "tag": "us",
      "server": "pigus.speedtestwget.life",
      "server_port": 443,
      "type": "trojan",
      "password": "smxmm1314",
      "tls": {
        "enabled": true,
        "insecure": false,
        "server_name": "pigus.speedtestwget.life"
      }
    }
  ]
}